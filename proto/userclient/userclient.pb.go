// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: userclient.proto

package userclientgrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	ShareChan   string `protobuf:"bytes,3,opt,name=ShareChan,proto3" json:"ShareChan,omitempty"`
	Sharemode   bool   `protobuf:"varint,4,opt,name=sharemode,proto3" json:"sharemode,omitempty"`
	Username    string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetBody) Reset() {
	*x = GetBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBody) ProtoMessage() {}

func (x *GetBody) ProtoReflect() protoreflect.Message {
	mi := &file_userclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBody.ProtoReflect.Descriptor instead.
func (*GetBody) Descriptor() ([]byte, []int) {
	return file_userclient_proto_rawDescGZIP(), []int{0}
}

func (x *GetBody) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetBody) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *GetBody) GetShareChan() string {
	if x != nil {
		return x.ShareChan
	}
	return ""
}

func (x *GetBody) GetSharemode() bool {
	if x != nil {
		return x.Sharemode
	}
	return false
}

func (x *GetBody) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PutBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Datatype    string `protobuf:"bytes,3,opt,name=datatype,proto3" json:"datatype,omitempty"`
	UserAddress string `protobuf:"bytes,4,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	Share       bool   `protobuf:"varint,5,opt,name=share,proto3" json:"share,omitempty"`
	ShareChan   string `protobuf:"bytes,6,opt,name=ShareChan,proto3" json:"ShareChan,omitempty"`
	Strict      bool   `protobuf:"varint,7,opt,name=strict,proto3" json:"strict,omitempty"`
	Passworld   string `protobuf:"bytes,8,opt,name=passworld,proto3" json:"passworld,omitempty"`
}

func (x *PutBody) Reset() {
	*x = PutBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBody) ProtoMessage() {}

func (x *PutBody) ProtoReflect() protoreflect.Message {
	mi := &file_userclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBody.ProtoReflect.Descriptor instead.
func (*PutBody) Descriptor() ([]byte, []int) {
	return file_userclient_proto_rawDescGZIP(), []int{1}
}

func (x *PutBody) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutBody) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutBody) GetDatatype() string {
	if x != nil {
		return x.Datatype
	}
	return ""
}

func (x *PutBody) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *PutBody) GetShare() bool {
	if x != nil {
		return x.Share
	}
	return false
}

func (x *PutBody) GetShareChan() string {
	if x != nil {
		return x.ShareChan
	}
	return ""
}

func (x *PutBody) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

func (x *PutBody) GetPassworld() string {
	if x != nil {
		return x.Passworld
	}
	return ""
}

type VerifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Info   string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *VerifyInfo) Reset() {
	*x = VerifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyInfo) ProtoMessage() {}

func (x *VerifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyInfo.ProtoReflect.Descriptor instead.
func (*VerifyInfo) Descriptor() ([]byte, []int) {
	return file_userclient_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyInfo) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *VerifyInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type ResQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 查找状态
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`      // 数据(如果找到的)
}

func (x *ResQuery) Reset() {
	*x = ResQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResQuery) ProtoMessage() {}

func (x *ResQuery) ProtoReflect() protoreflect.Message {
	mi := &file_userclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResQuery.ProtoReflect.Descriptor instead.
func (*ResQuery) Descriptor() ([]byte, []int) {
	return file_userclient_proto_rawDescGZIP(), []int{3}
}

func (x *ResQuery) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ResQuery) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_userclient_proto protoreflect.FileDescriptor

var file_userclient_proto_rawDesc = []byte{
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x67, 0x72,
	0x70, 0x63, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x07,
	0x50, 0x75, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x38, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x36, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x8d, 0x01, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x03,
	0x50, 0x75, 0x74, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x1a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x42, 0x02, 0x50, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userclient_proto_rawDescOnce sync.Once
	file_userclient_proto_rawDescData = file_userclient_proto_rawDesc
)

func file_userclient_proto_rawDescGZIP() []byte {
	file_userclient_proto_rawDescOnce.Do(func() {
		file_userclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_userclient_proto_rawDescData)
	})
	return file_userclient_proto_rawDescData
}

var file_userclient_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_userclient_proto_goTypes = []interface{}{
	(*GetBody)(nil),    // 0: userclientgrpc.GetBody
	(*PutBody)(nil),    // 1: userclientgrpc.PutBody
	(*VerifyInfo)(nil), // 2: userclientgrpc.VerifyInfo
	(*ResQuery)(nil),   // 3: userclientgrpc.ResQuery
}
var file_userclient_proto_depIdxs = []int32{
	0, // 0: userclientgrpc.UserClientService.Get:input_type -> userclientgrpc.GetBody
	1, // 1: userclientgrpc.UserClientService.Put:input_type -> userclientgrpc.PutBody
	3, // 2: userclientgrpc.UserClientService.Get:output_type -> userclientgrpc.ResQuery
	2, // 3: userclientgrpc.UserClientService.Put:output_type -> userclientgrpc.VerifyInfo
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_userclient_proto_init() }
func file_userclient_proto_init() {
	if File_userclient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userclient_proto_goTypes,
		DependencyIndexes: file_userclient_proto_depIdxs,
		MessageInfos:      file_userclient_proto_msgTypes,
	}.Build()
	File_userclient_proto = out.File
	file_userclient_proto_rawDesc = nil
	file_userclient_proto_goTypes = nil
	file_userclient_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserClientServiceClient is the client API for UserClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClientServiceClient interface {
	Get(ctx context.Context, in *GetBody, opts ...grpc.CallOption) (*ResQuery, error)
	Put(ctx context.Context, in *PutBody, opts ...grpc.CallOption) (*VerifyInfo, error)
}

type userClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClientServiceClient(cc grpc.ClientConnInterface) UserClientServiceClient {
	return &userClientServiceClient{cc}
}

func (c *userClientServiceClient) Get(ctx context.Context, in *GetBody, opts ...grpc.CallOption) (*ResQuery, error) {
	out := new(ResQuery)
	err := c.cc.Invoke(ctx, "/userclientgrpc.UserClientService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientServiceClient) Put(ctx context.Context, in *PutBody, opts ...grpc.CallOption) (*VerifyInfo, error) {
	out := new(VerifyInfo)
	err := c.cc.Invoke(ctx, "/userclientgrpc.UserClientService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserClientServiceServer is the server API for UserClientService service.
type UserClientServiceServer interface {
	Get(context.Context, *GetBody) (*ResQuery, error)
	Put(context.Context, *PutBody) (*VerifyInfo, error)
}

// UnimplementedUserClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserClientServiceServer struct {
}

func (*UnimplementedUserClientServiceServer) Get(context.Context, *GetBody) (*ResQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedUserClientServiceServer) Put(context.Context, *PutBody) (*VerifyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}

func RegisterUserClientServiceServer(s *grpc.Server, srv UserClientServiceServer) {
	s.RegisterService(&_UserClientService_serviceDesc, srv)
}

func _UserClientService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userclientgrpc.UserClientService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServiceServer).Get(ctx, req.(*GetBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClientService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userclientgrpc.UserClientService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServiceServer).Put(ctx, req.(*PutBody))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userclientgrpc.UserClientService",
	HandlerType: (*UserClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserClientService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _UserClientService_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userclient.proto",
}
