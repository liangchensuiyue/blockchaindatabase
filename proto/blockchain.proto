syntax = "proto3";
option java_multiple_files = true;//以非外部类模式生成
package blockchaingrpc;

/*
protoc --go_out=plugins=grpc:./ *.proto
 需要实现的服务;
    1. 区块打包验证
    2. 区块同步(比如某个节点数据滞后于其它节点。该节点获取当前最新区块的时间戳，然后与其它节点相比较，然后同步该时间戳之后的区块)
    3. 数据查询(比如b节点草稿中有某个数据(还没写入链中，所以在a节点中查询不到)，用户请求a，a是找不到的所以要去询问其它节点)

*/

/*
设计原则:
        1. header 与 follower 是双向流式的
        2. follower 与 client  仅响应式流式的
*/
// option java_package = "com.liangchen.DMQFollowerProto";
// option java_outer_classname = "DMQFollowerProto";
service BlockChainService{

    /// 分发区块
    rpc DistributeBlock(Block)returns(VerifyInfo){}

    // 区块同步
    rpc BlockSynchronization(ReqBlock)returns(ResBlocks){}

    // 数据查询
    // rpc DataQuery(QueryInfo)returns(ResQuery){}

    // 获取某个节点最新区块信息
    rpc GetLatestBlock(ReqBlock)returns(Block){}

    // 加入集群
    rpc JoinGroup(NodeInfo)returns(Nodes){}

    rpc Request(RequestBody)returns(VerifyInfo){}
    // // 客户端向 follower 发送数据
    // rpc ClientYieldMsgDataRequest(stream MessageData)returns (Response){}

    // // 客户端消费数据
    // rpc ClientConsumeData(ClientRegistToFollower)returns(stream Response){}

    // // 客户端关闭管道
    // rpc ClientCloseChannel(ClientRegistToFollower)returns(Response){}
}
message NodeInfo{
    string passworld = 1;
    string local_ip = 2;
    int32 local_port =3;
}
message RequestBody{
    string username = 1;
    string passworld = 2;
    Transaction Tx = 3;
}
message Nodes{
    repeated NodeInfo nodes = 1;
}
message VerifyInfo{
    bool status = 1;
    string info = 2;
}

message Transaction{
    string key = 1; 
    bytes value = 2;  // []byte
    string data_type = 3;
    uint64 timestamp = 4;  // 时间错
    bool del_mark = 5; // 是否删除
    bytes public_key = 6; // 用户公钥， 可以有多个(用户共享数据)
    bytes hash = 7; // 交易 hash
    bytes pre_block_hash = 8;// 在链中，用户相同交易所在前一个区块hahs(可以有多个，如果该数据类型是共享的话)
    bytes signature = 9; // 用户对交易的签名
    repeated string shareuseraddress = 10;
    bool share = 11;
}
message Block{
    bytes hash = 1; // 块 hash
    uint64 block_id = 2; // 块序号
    uint64 timestamp = 3; // 时间戳
    bytes pre_block_hash = 4; // 区块链中前一个区块hash
    bytes MerkelRoot = 5; // 区块链中前一个区块hash
    repeated Transaction TxInfos = 6;// 所要打包的交易
    bytes signature = 7;
}

// 区块同步
message ReqBlock{
    bytes hash = 1; // 本地节点最新区块hash
    uint64 block_id = 2;// 最新区块序号
}

message ResBlocks{
    // bytes latest_block_hash = 1; // 同步过来的最新区块hash
    repeated Block  blocks = 1; // 同步过来的区块数据
}

message QueryInfo{
    string key = 1; // 查询关键字
    bytes User_public_key_hash = 2;// 用户公钥hash；也就是地址
}
message ResPackBlock{
    bool code = 1; // 区块校验是否成功
}
message PackBlock{
    bytes hash = 1; // 区块hash
}
message ResQuery{
    bool code = 1; // 查找状态
    Transaction datas = 2; // 数据(如果找到的)
}